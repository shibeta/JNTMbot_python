name: Nightly Build

on:
  # 每天凌晨4点 (UTC时间晚上8点) 自动运行
  schedule:
    - cron: '0 20 * * *'
  # 允许手动触发
  workflow_dispatch:

jobs:
  # --- 构建 Python 部分 ---
  build_python:
    name: Build Python Executable
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 静默安装 ViGEmBus 驱动，避免卡在 pip install vgamepad
      - name: Install ViGEmBus Driver from local MSI
        run: |
          $msiPath = Join-Path $env:GITHUB_WORKSPACE "assets\ViGEmBusSetup_x64.msi"
          msiexec /i "$msiPath" /qn /norestart
          Write-Host "Waiting for ViGEmBus driver to settle..."
          Start-Sleep -Seconds 5
        shell: pwsh

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      # Nuitka 打包需要 MSVC 环境
      - name: Setup MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1

      - name: Package with Nuitka
        run: |
          nuitka --msvc=latest --standalone --assume-yes-for-downloads --nofollow-import-to=tkinter --output-dir=dist --include-package-data=rapidocr --windows-icon-from-ico=./assets/johnny_guns.ico --product-name=德瑞Bot --product-version=1.0 --file-description=德瑞Bot自动开车脚本 main.py
        shell: cmd
      
      - name: Upload Python artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-artifact
          path: ./dist/main.dist/

  # --- 构建 Node.js 部分 ---
  build_node:
    name: Build Node.js Executable
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Node.js dependencies and build
        run: |
          cd steam_bot
          npm install
          npm run build
        shell: bash

      - name: Upload Node.js artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-artifact
          path: ./steam_bot/dist/steam_bot.exe

  # --- 合并产物并创建 Release ---
  create_release:
    name: Create Nightly Release
    runs-on: windows-latest
    # 只有构建成功才需要发布
    needs: [build_python, build_node]
    # 为发布 Job 授予写权限
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

        # 设置当前日期环境变量
      - name: Set current date variable
        run: echo "TODAY=$(Get-Date -Format 'yyyy-MM-dd')" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # 将下载的 artifacts 存放到 build_output 文件夹
          path: build_output

      - name: Prepare and package release files
        id: package
        run: |
          # 定义目录和文件名
          $publishDir = "publish"
          $releaseSubDir = "$publishDir/release"
          $zipName = "JNTMbot_python_nightly.zip"
          $zipPath = "$publishDir/$zipName"

          New-Item -ItemType Directory -Force -Path $publishDir
          New-Item -ItemType Directory -Force -Path $releaseSubDir
          
          # 从下载的 artifacts 中复制构建好的文件
          Copy-Item -Path "./build_output/python-artifact/*" -Destination $releaseSubDir -Recurse -Force
          Copy-Item -Path "./build_output/node-artifact/steam_bot.exe" -Destination $releaseSubDir -Force
          
          # 重命名主程序
          Rename-Item -Path "$releaseSubDir/main.exe" -NewName "德瑞Bot.exe" -Force

          # 复制仓库根目录下的配置文件
          Copy-Item -Path "./config.yaml.example" -Destination "$releaseSubDir/config.yaml" -Force
          
          Compress-Archive -Path "$releaseSubDir/*" -DestinationPath $zipPath -Force
          
          echo "zip_path=$zipPath" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create or update Nightly Release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'nightly'
          name: 'Nightly Build ${{ env.TODAY }}'
          draft: false
          body: |
            This is a nightly release of JNTMbot_python.
            It's unstable compared to the official releases, **use it with caution**!
          prerelease: true
          files: ${{ steps.package.outputs.zip_path }}
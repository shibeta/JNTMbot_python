name: Stable Release

on:
  # 只允许手动触发
  workflow_dispatch:
    inputs:
      tag_name:
        description: '要创建的 tag (例如 v1.0.0)'
        required: true
      release_name:
        description: 'Release 的标题 (例如 Version 1.0.0)'
        required: true
      body:
        description: 'Release 的描述内容 (支持 Markdown)'
        required: false
        default: '这是一个稳定的发行版本。'
      is_draft:
        description: '是否创建为草稿 (Draft)?'
        type: boolean
        required: true
        default: true

jobs:
  # --- 构建 Python 部分 ---
  build_python:
    name: Build Python Executable
    runs-on: windows-latest
    env:
      PYTHONUTF8: "1"  # 强制 Python 使用 UTF-8 模式

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 格式化 tag name 以符合 Nuitka 版本号要求
      - name: Format Tag for Nuitka
        id: format_tag
        run: |
          $tagName = "${{ github.event.inputs.tag_name }}"
          # 如果 tag 以 'v' 开头，则移除它
          if ($tagName.StartsWith("v")) {
            $version = $tagName.Substring(1)
          } else {
            $version = $tagName
          }
          echo "PRODUCT_VERSION=$version" >> $env:GITHUB_ENV
          Write-Host "Formatted version for Nuitka: $version"
        shell: pwsh
      
      # 静默安装 ViGEmBus 驱动，避免卡在 pip install vgamepad
      - name: Install ViGEmBus Driver from local MSI
        run: |
          $msiPath = Join-Path $env:GITHUB_WORKSPACE "assets\ViGEmBusSetup_x64.msi"
          msiexec /i "$msiPath" /qn /norestart
          Write-Host "Waiting for ViGEmBus driver to settle..."
          Start-Sleep -Seconds 5
        shell: pwsh

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      # Nuitka 打包 vgamepad 时，需要指定 vigembus 驱动的路径
      - name: Find and set vgamepad data path
        run: |
          $vgamepadPkgPath = python -c "import vgamepad, os; print(os.path.dirname(vgamepad.__file__))"

          # vigem 文件夹，包括驱动安装文件和 client DLL
          $vigemDataPath = Join-Path $vgamepadPkgPath "win\vigem"
          echo "VGAMEPAD_VIGEM_PATH=$vigemDataPath" >> $env:GITHUB_ENV
          Write-Host "Set VGAMEPAD_VIGEM_PATH to: $vigemDataPath"

          # --include-data-dir 不会打包 DLL，需要单独指定
          # vigem client DLL 64 位
          $vigemDll64Path = Join-Path $vgamepadPkgPath "win\vigem\client\x64\ViGEmClient.dll"
          echo "VIGEM_DLL64_PATH=$vigemDll64Path" >> $env:GITHUB_ENV
          Write-Host "Set VIGEM_DLL64_PATH to: $vigemDllPath"

          # vigem client DLL 32 位
          $vigemDll86Path = Join-Path $vgamepadPkgPath "win\vigem\client\x86\ViGEmClient.dll"
          echo "VIGEM_DLL86_PATH=$vigemDll86Path" >> $env:GITHUB_ENV
          Write-Host "Set VIGEM_DLL86_PATH to: $vigemDllPath"

        shell: pwsh

      # Nuitka 打包需要 MSVC 环境
      - name: Setup MSVC Developer Command Prompt
        uses: TheMrMilchmann/setup-msvc-dev@v4
        with:
          arch: x64

      - name: Package with Nuitka
        run: |
          nuitka --msvc=latest --standalone --assume-yes-for-downloads --nofollow-import-to=tkinter `
          --output-dir=dist `
          --include-package-data=rapidocr `
          --include-data-dir="${{ env.VGAMEPAD_VIGEM_PATH }}=vgamepad\win\vigem" `
          --include-data-file="${{ env.VIGEM_DLL64_PATH }}=vgamepad\win\vigem\client\x64\ViGEmClient.dll" `
          --include-data-file="${{ env.VIGEM_DLL86_PATH }}=vgamepad\win\vigem\client\x86\ViGEmClient.dll" `
          --windows-icon-from-ico=./assets/johnny_guns.ico `
          --product-name=德瑞Bot --product-version=${{ env.PRODUCT_VERSION }} --file-description=德瑞Bot自动开车脚本 main.py

        shell: pwsh

      - name: Upload Python artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-artifact
          path: ./dist/main.dist/

  # --- 构建 Node.js 部分 ---
  build_node:
    name: Build Node.js Executable
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Node.js dependencies and build
        run: |
          cd steam_bot
          npm install
          npm run build
        shell: bash

      - name: Upload Node.js artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-artifact
          path: ./steam_bot/dist/steam_bot.exe

  # --- 合并产物并创建 Release ---
  create_release:
    name: Create Stable Release
    runs-on: windows-latest
    # 只有构建成功才需要发布
    needs: [build_python, build_node]
    # 为发布 Job 授予写权限
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # 将下载的 artifacts 存放到 build_output 文件夹
          path: build_output

      - name: Prepare and package release files
        id: package
        run: |
          # 定义目录和文件名
          $publishDir = "publish"
          $releaseSubDir = "$publishDir/release"
          $zipName = "JNTMbot_python.zip"
          $zipPath = "$publishDir/$zipName"

          New-Item -ItemType Directory -Force -Path $publishDir
          New-Item -ItemType Directory -Force -Path $releaseSubDir
          
          # 从下载的 artifacts 中复制构建好的文件
          Copy-Item -Path "./build_output/python-artifact/*" -Destination $releaseSubDir -Recurse -Force
          Copy-Item -Path "./build_output/node-artifact/steam_bot.exe" -Destination $releaseSubDir -Force
          
          # 重命名主程序
          Rename-Item -Path "$releaseSubDir/main.exe" -NewName "德瑞Bot.exe" -Force
          
          # 复制仓库根目录下的配置文件
          Copy-Item -Path "./config.yaml.example" -Destination "$releaseSubDir/config.yaml" -Force

          # 复制仓库根目录下的 install_vigembus.bat
          Copy-Item -Path "./install_vigembus.bat" -Destination "$releaseSubDir/install_vigembus.bat" -Force
          
          Compress-Archive -Path "$releaseSubDir/*" -DestinationPath $zipPath -Force
          
          echo "zip_path=$zipPath" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ steps.package.outputs.zip_path }}
          tag_name: ${{ github.event.inputs.tag_name }}
          name: ${{ github.event.inputs.release_name }}
          body: |
            ${{ github.event.inputs.body }}
            ---
            使用方法: [点此查看](https://github.com/shibeta/JNTMbot_python?tab=readme-ov-file#%E6%96%B9%E5%BC%8F%E4%B8%80%E8%BF%90%E8%A1%8C%E5%8F%91%E8%A1%8C%E7%89%88)
          draft: ${{ github.event.inputs.is_draft }}
          prerelease: false
